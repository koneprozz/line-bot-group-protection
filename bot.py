from flask import Flask, request, abort
from linebot import LineBotApi, WebhookHandler
from linebot.exceptions import InvalidSignatureError
from linebot.models import *
import re

app = Flask(__name__)

import os
LINE_CHANNEL_ACCESS_TOKEN = os.environ.get("LINE_CHANNEL_ACCESS_TOKEN")
LINE_CHANNEL_SECRET = os.environ.get("LINE_CHANNEL_SECRET")

line_bot_api = LineBotApi(LINE_CHANNEL_ACCESS_TOKEN)
handler = WebhookHandler(LINE_CHANNEL_SECRET)

admin_users = ['U1234567890abcdef']

group_config = {}

def get_group_config(group_id):
    if group_id not in group_config:
        group_config[group_id] = {
            "lock_enabled": False,
            "link_block": True,
            "invite_block": True
        }
    return group_config[group_id]

def contains_link(text):
    return bool(re.search(r'https?://|www\.', text))

def send_log_to_admin(text):
    for admin_id in admin_users:
        try:
            line_bot_api.push_message(admin_id, TextSendMessage(text))
        except Exception as e:
            print(f"Log ‡∏™‡πà‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")

def kick_user(group_id, user_id, reply_token=None, reason="‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"):
    try:
        line_bot_api.kickout_group_member(group_id, user_id)
        profile = line_bot_api.get_profile(user_id)
        user_name = profile.display_name
        send_log_to_admin(f"\U0001F6A5 ‡πÄ‡∏ï‡∏∞‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å: {user_name} (ID: {user_id})\n‡∏Å‡∏•‡∏∏‡πà‡∏°: {group_id}\n‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•: {reason}")
    except:
        if reply_token:
            line_bot_api.reply_message(reply_token, TextSendMessage("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ï‡∏∞‡πÑ‡∏î‡πâ (‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå)"))

@app.route("/callback", methods=['POST'])
def callback():
    signature = request.headers['X-Line-Signature']
    body = request.get_data(as_text=True)
    try:
        handler.handle(body, signature)
    except InvalidSignatureError:
        abort(400)
    return 'OK'

@handler.add(MessageEvent)
def handle_message(event):
    user_id = event.source.user_id
    group_id = getattr(event.source, 'group_id', None)
    msg = event.message

    if group_id is None:
        return

    config = get_group_config(group_id)

    if isinstance(msg, TextMessage):
        text = msg.text.strip().lower()

        if user_id in admin_users:
            if text == "/menu":
                menu = (
                    "üìã ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô:\n"
                    "/lock - ‡∏•‡πá‡∏≠‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°\n"
                    "/unlock - ‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°\n"
                    "/enable link - ‡πÄ‡∏õ‡∏¥‡∏î‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏•‡∏¥‡∏á‡∏Å‡πå\n"
                    "/disable link - ‡∏õ‡∏¥‡∏î‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏•‡∏¥‡∏á‡∏Å‡πå\n"
                    "/enable invite - ‡πÄ‡∏õ‡∏¥‡∏î‡∏ö‡∏•‡πá‡∏≠‡∏Å‡πÄ‡∏ä‡∏¥‡∏ç‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å\n"
                    "/disable invite - ‡∏õ‡∏¥‡∏î‡∏ö‡∏•‡πá‡∏≠‡∏Å‡πÄ‡∏ä‡∏¥‡∏ç‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å\n"
                    "/status - ‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"
                )
                line_bot_api.reply_message(event.reply_token, TextSendMessage(menu))
                return

            elif text == "/lock":
                config["lock_enabled"] = True
                line_bot_api.reply_message(event.reply_token, TextSendMessage("üîí ‡∏•‡πá‡∏≠‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß"))
                return

            elif text == "/unlock":
                config["lock_enabled"] = False
                line_bot_api.reply_message(event.reply_token, TextSendMessage("üîì ‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß"))
                return

            elif text == "/enable link":
                config["link_block"] = True
                line_bot_api.reply_message(event.reply_token, TextSendMessage("‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏•‡∏¥‡∏á‡∏Å‡πå"))
                return

            elif text == "/disable link":
                config["link_block"] = False
                line_bot_api.reply_message(event.reply_token, TextSendMessage("‚ùå ‡∏õ‡∏¥‡∏î‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏•‡∏¥‡∏á‡∏Å‡πå"))
                return

            elif text == "/enable invite":
                config["invite_block"] = True
                line_bot_api.reply_message(event.reply_token, TextSendMessage("‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏¥‡∏ç"))
                return

            elif text == "/disable invite":
                config["invite_block"] = False
                line_bot_api.reply_message(event.reply_token, TextSendMessage("‚ùå ‡∏õ‡∏¥‡∏î‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏¥‡∏ç"))
                return

            elif text == "/status":
                status = (
                    f"üîß ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏•‡∏∏‡πà‡∏°:\n"
                    f"üîí ‡∏•‡πá‡∏≠‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°: {'‚úÖ' if config['lock_enabled'] else '‚ùå'}\n"
                    f"üîó ‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏•‡∏¥‡∏á‡∏Å‡πå: {'‚úÖ' if config['link_block'] else '‚ùå'}\n"
                    f"üö´ ‡∏ö‡∏•‡πá‡∏≠‡∏Å‡πÄ‡∏ä‡∏¥‡∏ç‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å: {'‚úÖ' if config['invite_block'] else '‚ùå'}"
                )
                line_bot_api.reply_message(event.reply_token, TextSendMessage(status))
                return

        if user_id not in admin_users:
            if config["lock_enabled"]:
                if contains_link(msg.text) and config["link_block"]:
                    kick_user(group_id, user_id, event.reply_token, reason="‡∏™‡πà‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ö‡∏•‡πá‡∏≠‡∏Å")
                    return

            allowed = (TextMessage, ImageMessage, StickerMessage)
            if config["lock_enabled"] and not isinstance(msg, allowed):
                kick_user(group_id, user_id, event.reply_token, reason="‡∏™‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå/‡∏™‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏ï‡∏≠‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏•‡πá‡∏≠‡∏Å")
                return

    if isinstance(msg, (ImageMessage, StickerMessage)):
        return

    if user_id not in admin_users and config["lock_enabled"]:
        allowed = (TextMessage, ImageMessage, StickerMessage)
        if not isinstance(msg, allowed):
            kick_user(group_id, user_id, event.reply_token, reason="‡∏™‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå/‡∏™‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏ï‡∏≠‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏•‡πá‡∏≠‡∏Å")

@handler.add(MemberJoinedEvent)
def handle_member_joined(event):
    group_id = event.source.group_id
    config = get_group_config(group_id)

    for member in event.joined.members:
        if config["invite_block"] and member.user_id not in admin_users:
            kick_user(group_id, member.user_id, reason="‡∏ñ‡∏π‡∏Å‡πÄ‡∏ä‡∏¥‡∏ç‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô")
